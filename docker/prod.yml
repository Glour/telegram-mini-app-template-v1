networks:
  shared_network:
    driver: bridge

services:
  # NGINX reverse proxy service
  nginx:
    image: nginx:1.25
    container_name: nginx_prod
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/dev.site.conf:/etc/nginx/conf.d/default.conf
      - ./logs/nginx/:/var/log/nginx/
    restart: unless-stopped
    ports:
      - "81:80"
      - "443:443"
    depends_on:
      - api
    networks:
      - shared_network

  # Telegram bot service
  bot:
    container_name: bot
    build:
      target: prod-build
      context: ..
      dockerfile: backend/bot/Dockerfile
    env_file:
      - .env.prod
    volumes:
      - ../backend/infrastructure/migrations/versions:/app/infrastructure/migrations/versions
    restart: unless-stopped
    depends_on:
      - api
    networks:
      - shared_network

  # API service
  api:
    container_name: api
    build:
      context: ..
      dockerfile: backend/api/Dockerfile
      target: prod-build
    volumes:
      - ../backend:/app/
    env_file:
      - .env.prod
    ports:
      - "8000:8000"
    restart: unless-stopped
    networks:
      - shared_network

  # PostgreSQL database for bot
  postgres:
    image: postgres:15.3
    container_name: database
    restart: unless-stopped
    volumes:
      - database_volume:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES__DB_USER}
      POSTGRES_PASSWORD: ${POSTGRES__DB_PASSWORD}
      POSTGRES_DB: ${POSTGRES__DB_NAME}
    expose:
      - 5432
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES__DB_USER} -d ${POSTGRES__DB_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - shared_network

  # Redis
  redis:
    image: redis:latest
    container_name: redis
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 10s
      retries: 10
    restart: unless-stopped
    networks:
      - shared_network

  # Dozzle
  dozzle:
    image: amir20/dozzle:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8080:8080"
    networks:
      - shared_network

volumes:
  database_volume:

